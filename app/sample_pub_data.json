{"_id":"57294fc5bc5c82380069c2af","slug":"uap-final-paper","title":"6.UAP Final Paper","abstract":"","createDate":"2016-05-04T01:26:29.189Z","isPublished":true,"isPage":false,"__v":11,"lastUpdated":"2016-05-09T01:36:29.859Z","markdown":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode. [7]\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462757699030_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462757699030_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572fe943a4d1be32003ebc86\",\"label\":\"onlinereader.png\"},\"align\":null,\"size\":null,\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Save for Offline\\\" option to save a Pub locally. [8]\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello. [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://viral.pubpub.org/[[{\"pluginType\":\"linebreak\"}]]\n[8] http://www.pubpub.org/pub/engineering-and-ethics","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","submittedToList":[],"submittedTo":[],"featuredInList":[],"featuredIn":[],"discussions":[],"followers":[],"collaborators":{"canRead":[],"canEdit":["56d92bf04f6a693d006dde6f"]},"tags":[],"history":[{"versionNote":"initial commit","versionDate":"2016-05-04T01:43:04.663Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: UAP Final Paper\n\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. However, as a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. \n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\nPubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\n\nBut more importantly, PubPub recognizes three facets of modern research: it is collaborative, it is ongoing, and it increasingly crosses traditional disciplinary boundaries. In order to address these changes, PubPub is deliberately author-driven. It supports publishing and versioning that is immediate and reviews that are post-publication, double-open, and public. It is a place for evolving ideas among communities large and small [1].\n\n# Task Analysis\n### Publication Reading, Editing, and Commenting\n### Offline Editing\n### Data Syncing\n# User Interface and Feature Set\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n","styleDesktop":"","isPublished":false,"_id":"572953a8d0b20e3d00413456","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":1,"deletions":0,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"","count":0}],"diffMarkdown":[{"count":25,"added":true,"value":"-----\ntitle: UAP Final Paper\n\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. However, as a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. \n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\nPubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\n\nBut more importantly, PubPub recognizes three facets of modern research: it is collaborative, it is ongoing, and it increasingly crosses traditional disciplinary boundaries. In order to address these changes, PubPub is deliberately author-driven. It supports publishing and versioning that is immediate and reviews that are post-publication, double-open, and public. It is a place for evolving ideas among communities large and small [1].\n\n# Task Analysis\n### Publication Reading, Editing, and Commenting\n### Offline Editing\n### Data Syncing\n# User Interface and Feature Set\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n"}]}},{"versionNote":"inserted mockups","versionDate":"2016-05-05T04:19:19.829Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: UAP Final Paper\n\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. However, as a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. \n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\n\nBut more importantly, PubPub recognizes three facets of modern research: it is collaborative, it is ongoing, and it increasingly crosses traditional disciplinary boundaries. In order to address these changes, PubPub is deliberately author-driven. It supports publishing and versioning that is immediate and reviews that are post-publication, double-open, and public. It is a place for evolving ideas among communities large and small.\" [1]\n\n# Task Analysis\nThis section summarizes the planned features and their designs for the full desktop client. \n\n### Publication Reading, Editing, and Commenting\n\n### Offline Editing\n\n### Data Syncing\n\n# User Interface and Feature Set\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n","styleDesktop":"","isPublished":false,"_id":"572ac9c7a2637f38000901f2","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":2,"deletions":2,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"","count":0}],"diffMarkdown":[{"count":11,"value":"-----\ntitle: UAP Final Paper\n\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. However, as a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. \n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n"},{"count":1,"removed":true,"value":"PubPub is a platform for creating, distributing, and reviewing publications."},{"count":1,"added":true,"value":"\"PubPub is a platform for creating, distributing, and reviewing publications."},{"count":10,"value":" It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\n\nBut more importantly, PubPub recognizes three facets of modern research: it is collaborative, it is ongoing, and it increasingly crosses traditional disciplinary boundaries. In order to address these changes, PubPub is deliberately author-driven. It supports publishing and versioning that is immediate and reviews that are post-publication, double-open, and public."},{"count":3,"removed":true,"value":" It is a place for evolving ideas among communities large and small [1].\n\n# Task Analysis\n### Publication Reading, Editing, and Commenting\n### Offline Editing\n### Data Syncing\n# User Interface and Feature Set\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n"},{"count":3,"added":true,"value":" It is a place for evolving ideas among communities large and small.\" [1]\n\n# Task Analysis\nThis section summarizes the planned features and their designs for the full desktop client. \n\n### Publication Reading, Editing, and Commenting\n\n### Offline Editing\n\n### Data Syncing\n\n# User Interface and Feature Set\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n"}]}},{"versionNote":"add electron/nwjs comparison","versionDate":"2016-05-05T23:47:18.037Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: UAP Final Paper\n\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication reader with the ability to access publications from the original PubPub database, and save individual  documents locally for offline viewing.\n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\n\nBut more importantly, PubPub recognizes three facets of modern research: it is collaborative, it is ongoing, and it increasingly crosses traditional disciplinary boundaries. In order to address these changes, PubPub is deliberately author-driven. It supports publishing and versioning that is immediate and reviews that are post-publication, double-open, and public. It is a place for evolving ideas among communities large and small.\" [1]\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n# Task Analysis\nThis section summarizes the planned features and their designs for the full desktop client. \n\n### Publication Reading, Editing, and Commenting\n\n### Offline Editing\n\n### Data Syncing\n\n# User Interface and Feature Set\nThe current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can work together with the existing PubPub codebase.\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":null,\"reference\":null}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/","styleDesktop":"","isPublished":false,"_id":"572bdb86ab8b4c3800179261","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":5,"deletions":5,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"","count":0}],"diffMarkdown":[{"count":3,"value":"-----\ntitle: UAP Final Paper\n\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. "},{"count":1,"removed":true,"value":"However, as a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications."},{"count":1,"added":true,"value":"As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications."},{"count":4,"value":" The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies."},{"count":1,"removed":true,"value":" \n\n"},{"count":3,"added":true,"value":" This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication reader with the ability to access publications from the original PubPub database, and save individual  documents locally for offline viewing.\n\n"},{"count":1,"value":"Author's Note: This paper serves as the final report for a 6.UAP project, and is in progress."},{"count":1,"removed":true,"value":"\n\n-----\n\n\n# Background\n"},{"count":1,"added":true,"value":"\n\n-----\n\n\n# Background\n\n### PubPub\n"},{"count":11,"value":"\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\n\nBut more importantly, PubPub recognizes three facets of modern research: it is collaborative, it is ongoing, and it increasingly crosses traditional disciplinary boundaries. In order to address these changes, PubPub is deliberately author-driven. It supports publishing and versioning that is immediate and reviews that are post-publication, double-open, and public."},{"count":1,"removed":true,"value":" It is a place for evolving ideas among communities large and small.\" [1]\n\n# Task Analysis\n"},{"count":23,"added":true,"value":" It is a place for evolving ideas among communities large and small.\" [1]\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n# Task Analysis\n"},{"count":1,"value":"This section summarizes the planned features and their designs for the full desktop client."},{"count":1,"removed":true,"value":" \n\n### Publication Reading, Editing, and Commenting\n\n### Offline Editing\n\n### Data Syncing\n\n# User Interface and Feature Set\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n"},{"count":3,"added":true,"value":" \n\n### Publication Reading, Editing, and Commenting\n\n### Offline Editing\n\n### Data Syncing\n\n# User Interface and Feature Set\nThe current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can work together with the existing PubPub codebase.\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":null,\"reference\":null}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/"}]}},{"versionNote":"background and task analysis","versionDate":"2016-05-06T02:39:33.476Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a much-simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n# Task Analysis\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. \n\nOne design choice is the question of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6]. For this iteration, we choose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":null,\"reference\":null}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n\n# Future Work\nasset loading\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":false,"_id":"572c03e5d207ff3d00966e82","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":6,"deletions":5,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"count":13,"added":true,"value":"h3 {\n  margin-bottom: 0px;\n}"}],"diffMarkdown":[{"count":1,"removed":true,"value":"-----\ntitle: UAP Final Paper\n\nauthor: tian_mi\n\tname: Tian Mi\n\n\n"},{"count":1,"added":true,"value":"-----\ntitle: UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\n"},{"count":8,"value":"PubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. "},{"count":1,"removed":true,"value":"This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication reader with the ability to access publications from the original PubPub database, and save individual  documents locally for offline viewing."},{"count":1,"added":true,"value":"This paper describes an initial first pass at implementing a much-simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing."},{"count":7,"value":"\n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. "},{"count":3,"removed":true,"value":"Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\n\nBut more importantly, PubPub recognizes three facets of modern research: it is collaborative, it is ongoing, and it increasingly crosses traditional disciplinary boundaries."},{"count":1,"added":true,"value":"Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators."},{"count":1,"value":" "},{"count":4,"removed":true,"value":"In order to address these changes, PubPub is deliberately author-driven. It supports publishing and versioning that is immediate and reviews that are post-publication, double-open, and public. It is a place for evolving ideas among communities large and small.\" [1]\n\n### Electron\n"},{"count":2,"added":true,"value":"In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\n"},{"count":22,"value":"Electron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n# Task Analysis\n"},{"count":4,"removed":true,"value":"This section summarizes the planned features and their designs for the full desktop client. \n\n### Publication Reading, Editing, and Commenting\n\n### Offline Editing\n\n### Data Syncing\n\n# User Interface and Feature Set\nThe current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can work together with the existing PubPub codebase.\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":null,\"reference\":null}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n# Current Work\n# Future Work\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/"},{"count":18,"added":true,"value":"This section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. \n\nOne design choice is the question of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6]. For this iteration, we choose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":null,\"reference\":null}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n\n# Future Work\nasset loading\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561"}]}},{"versionNote":"task analysis and captions","versionDate":"2016-05-06T03:17:12.724Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n# Task Analysis\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [7] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh with an \"Update All Pubs\" button, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application, or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page, and the homepage link on the top-left of the navigation bar will also direct to this page.\",\"reference\":null}]]\n\n### Offline Mode Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage after switching to Offline Mode. The user can view\\\\n\\\\nThis page is also accessible from the homepage when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":\"The Pub reader. Users can choose to save a publication for offline reading by toggling the switch on the left-hand side. Untoggling the switch will delete the document from local storage.\",\"reference\":null}]]\n\n\n# Electron Integration\n\n# Future Work\nasset loading\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":false,"_id":"572c0cb8d207ff3d00966e84","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":5,"deletions":3,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"h3 {\n  margin-bottom: 0px;\n}","count":13}],"diffMarkdown":[{"count":9,"value":"-----\ntitle: UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. "},{"count":1,"removed":true,"value":"This paper describes an initial first pass at implementing a much-simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing."},{"count":1,"added":true,"value":"This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing."},{"count":42,"value":"\n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n# Task Analysis\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage."},{"count":8,"added":true,"value":" The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode."},{"count":1,"value":" \n\n"},{"count":1,"removed":true,"value":"One design choice is the question of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode."},{"count":1,"added":true,"value":"We have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode."},{"count":4,"value":" A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6]."},{"count":2,"added":true,"value":"  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request."},{"count":1,"value":" "},{"count":2,"removed":true,"value":"For this iteration, we choose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"}}]]\n\n### Offline (Saved) Pubs Listing\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"}}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":null,\"reference\":null}]]\n\n### Offline Reader View\n\n\n# Electron Integration\n\n# Future Work\nasset loading\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561"},{"count":22,"added":true,"value":"[7] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh with an \"Update All Pubs\" button, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application, or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page, and the homepage link on the top-left of the navigation bar will also direct to this page.\",\"reference\":null}]]\n\n### Offline Mode Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage after switching to Offline Mode. The user can view\\\\n\\\\nThis page is also accessible from the homepage when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":\"The Pub reader. Users can choose to save a publication for offline reading by toggling the switch on the left-hand side. Untoggling the switch will delete the document from local storage.\",\"reference\":null}]]\n\n\n# Electron Integration\n\n# Future Work\nasset loading\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md"}]}},{"versionNote":"mostly done, need to insert references","versionDate":"2016-05-06T04:21:00.575Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [7] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh with an \"Update All Pubs\" button, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally.\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":false,"_id":"572c1badd207ff3d00966e8a","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":5,"deletions":5,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"h3 {\n  margin-bottom: 0px;\n}","count":13}],"diffMarkdown":[{"count":1,"removed":true,"value":"-----\ntitle: UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\n"},{"count":1,"added":true,"value":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\n"},{"count":9,"value":"PubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing."},{"count":3,"removed":true,"value":"\n\nAuthor's Note: This paper serves as the final report for a 6.UAP project, and is in progress.\n\n-----\n\n\n# Background\n\n### PubPub\n"},{"count":1,"added":true,"value":"\n\n-----\n\n# Background\n\n### PubPub\n"},{"count":29,"value":"\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality."},{"count":1,"removed":true,"value":" [4]\n\n# Task Analysis\n"},{"count":1,"added":true,"value":" [4]\n\n---\n\n# Features\n"},{"count":40,"value":"This section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [7] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh with an \"Update All Pubs\" button, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. "},{"count":5,"removed":true,"value":"The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application, or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page, and the homepage link on the top-left of the navigation bar will also direct to this page.\",\"reference\":null}]]\n\n### Offline Mode Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage after switching to Offline Mode. The user can view\\\\n\\\\nThis page is also accessible from the homepage when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421732904_readermockup.png\",\"originalFilename\":\"readermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e682e48f3d005033d7\",\"label\":\"readermockup.png\"},\"align\":null,\"size\":null,\"caption\":\"The Pub reader."},{"count":1,"added":true,"value":"The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode."},{"count":1,"value":" "},{"count":2,"removed":true,"value":"Users can choose to save a publication for offline reading by toggling the switch on the left-hand side. Untoggling the switch will delete the document from local storage.\",\"reference\":null}]]\n\n\n# Electron Integration\n\n# Future Work\nasset loading\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md"},{"count":16,"added":true,"value":"Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally.\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md"}]}},{"versionNote":"still need to do references","versionDate":"2016-05-06T05:29:24.637Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [7] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally.\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":true,"_id":"572c2bb4ab8b4c3800179269","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":1,"deletions":1,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"h3 {\n  margin-bottom: 0px;\n}","count":13}],"diffMarkdown":[{"count":75,"value":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use.\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [4]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [7] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. "},{"count":1,"removed":true,"value":"Additionally, we  give the user the option to manually trigger this refresh with an \"Update All Pubs\" button, in the event that the user knows he or she will lose connectivity imminently (i.e."},{"count":1,"added":true,"value":"Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e."},{"count":23,"value":" boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally.\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md"}]}},{"versionNote":"adding citations","versionDate":"2016-05-09T01:16:37.260Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally. [7]\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[4] http://github.hubspot.com/offline/docs/welcome/\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md\n[7] http://www.pubpub.org/pub/engineering-and-ethics","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":true,"_id":"572fe4f5a4d1be32003ebc82","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":7,"deletions":7,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"h3 {\n  margin-bottom: 0px;\n}","count":13}],"diffMarkdown":[{"count":38,"value":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use."},{"count":1,"removed":true,"value":"\n\n"},{"count":1,"added":true,"value":" [2]\n\n"},{"count":1,"value":"The main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality."},{"count":1,"removed":true,"value":" [4]\n\n---\n\n# Features\n"},{"count":1,"added":true,"value":" [3]\n\n---\n\n# Features\n"},{"count":20,"value":"This section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. "},{"count":1,"removed":true,"value":"A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [5]."},{"count":1,"added":true,"value":"A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]."},{"count":1,"value":" "},{"count":1,"removed":true,"value":"An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [6]."},{"count":1,"added":true,"value":"An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5]."},{"count":3,"value":"  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. "},{"count":1,"removed":true,"value":"[7] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity."},{"count":1,"added":true,"value":"[6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity."},{"count":23,"value":" \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n"},{"count":2,"removed":true,"value":"[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally.\",\"reference\":null}]]\n\n### Offline Reader View\n"},{"count":4,"added":true,"value":"[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally. [7]\",\"reference\":null}]]\n\n### Offline Reader View\n"},{"count":5,"value":"[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions."},{"count":1,"removed":true,"value":" \n\n----\n# References\n[1] \"Hello, PubPub\"\n[2] http://www.pubpub.org/pub/engineering-and-ethics\n[3] http://viral.pubpub.org/\n[4] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\nhttps://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[5]http://github.hubspot.com/offline/docs/welcome/\n[6] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[7]https://github.com/electron/electron/blob/master/docs/api/session.md"},{"count":5,"added":true,"value":" \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[4] http://github.hubspot.com/offline/docs/welcome/\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md\n[7] http://www.pubpub.org/pub/engineering-and-ethics"}]}},{"versionNote":"references formatting?","versionDate":"2016-05-09T01:24:20.750Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally. [7]\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello. [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://www.pubpub.org/pub/engineering-and-ethics","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":true,"_id":"572fe6c4a4d1be32003ebc84","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":1,"deletions":1,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"h3 {\n  margin-bottom: 0px;\n}","count":13}],"diffMarkdown":[{"count":104,"value":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally. [7]\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\"."},{"count":1,"removed":true,"value":" http://www.pubpub.org/pub/hello\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/\n[4] http://github.hubspot.com/offline/docs/welcome/\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md\n[7] http://www.pubpub.org/pub/engineering-and-ethics"},{"count":3,"added":true,"value":" http://www.pubpub.org/pub/hello. [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://www.pubpub.org/pub/engineering-and-ethics"}]}},{"versionNote":"reference formatting","versionDate":"2016-05-09T01:26:19.629Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode. [7]\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally. [8]\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello. [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://viral.pubpub.org/[[{\"pluginType\":\"linebreak\"}]]\n[8] http://www.pubpub.org/pub/engineering-and-ethics","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":true,"_id":"572fe73b1ea9923800685817","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":3,"deletions":3,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"h3 {\n  margin-bottom: 0px;\n}","count":13}],"diffMarkdown":[{"count":85,"value":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n"},{"count":2,"removed":true,"value":"[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"originalFilename\":\"offlinemockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode.\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n"},{"count":4,"added":true,"value":"[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode. [7]\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n"},{"count":7,"value":"[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Read Offline\\\" option to save a Pub locally."},{"count":1,"removed":true,"value":" [7]\",\"reference\":null}]]\n\n### Offline Reader View\n"},{"count":1,"added":true,"value":" [8]\",\"reference\":null}]]\n\n### Offline Reader View\n"},{"count":11,"value":"[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello."},{"count":1,"removed":true,"value":" [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://www.pubpub.org/pub/engineering-and-ethics"},{"count":1,"added":true,"value":" [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://viral.pubpub.org/[[{\"pluginType\":\"linebreak\"}]]\n[8] http://www.pubpub.org/pub/engineering-and-ethics"}]}},{"versionNote":"read offline -> save for offline","versionDate":"2016-05-09T01:36:29.859Z","versionAuthor":"56d92bf04f6a693d006dde6f","markdown":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode. [7]\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462757699030_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462757699030_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572fe943a4d1be32003ebc86\",\"label\":\"onlinereader.png\"},\"align\":null,\"size\":null,\"caption\":\"The Pub reader view, when not in Offline Mode. The user can toggle the \\\"Save for Offline\\\" option to save a Pub locally. [8]\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello. [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://viral.pubpub.org/[[{\"pluginType\":\"linebreak\"}]]\n[8] http://www.pubpub.org/pub/engineering-and-ethics","styleDesktop":"h3 {\n  margin-bottom: 0px;\n}","styleMobile":"","styleScoped":"#pubContent h3 {\n  margin-bottom: 0px;\n}\n","isPublished":true,"_id":"572fe99d1ea992380068581c","authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"diffObject":{"additions":2,"deletions":2,"diffStyleMobile":[{"value":"","count":0}],"diffStyleDesktop":[{"value":"h3 {\n  margin-bottom: 0px;\n}","count":13}],"diffMarkdown":[{"count":93,"value":"-----\ntitle: 6.UAP Final Paper\n# Cross-Platform Synchronized Editors for Rich Publications\nauthor: tian_mi\n\tname: Tian Mi\n\n\nPubPub is a platform developed by the Media Labâ€™s Viral Communications group for transparent publishing and distributed review. As a web application, PubPub requires access to an internet connection in order to read, write, or annotate publications. The purpose of this project is to create a native desktop client for PubPub that will be compatible across different operating systems, automatically synchronize data, and provide a seamless online and offline experience. The project integrates PubPub components with Electron, a library for building cross-platform desktop applications using web technologies. This paper describes an initial first pass at implementing a simplified version of the full application, in the form of a publication (Pub) reader with the ability to access Pubs from the original PubPub database, and save individual  documents locally for offline viewing.\n\n-----\n\n# Background\n\n### PubPub\n\"PubPub is a platform for creating, distributing, and reviewing publications. It modernizes the process by granting first-class status to datasets, interactive visualizations, videos, and rich comments. Instead of snapshots and static images, they become part of an interactive living document, usable as well as readable.\" [1] The PubPub web application implements a rich-text editor based on Markdown text-to-HTML conversion, including support for embedding assets such as images and references, editing text styling with custom CSS, versioned history tracking for each Pub, and sharing a document between multiple collaborators. In addition to Pub creation and reading, it includes social features such as commenting (\"Discussions\") on Pubs,  and collecting Pubs in curated Journals.\n\n### Electron\nElectron is one of two popular open-source libraries (the other being NW.js) that allow users to create native desktop applications using web technologies such as HTML, CSS, and Javascript. Both are based on Node.JS and a Chromium-based browser runtime. For the purposes of this project, we researched online to compare the pros and cons of the two and chose Electron over NW.js for the following reasons:\n\n**Better  support**\n[[{\"pluginType\":\"linebreak\"}]]Electron, which is sponsored by Github, is used for Github's Atom text editor as well as several other major products such as Microsoft's Visual Studio Code, so it seems likely that it will be well- maintained and updated in the long-term.  (In contrast, NW.js is sponsored by Intel, which does not publish any products using the library). Electron is also updated more frequently, and follows the latest version of Chromium more closely. \n\n**More popular**\n[[{\"pluginType\":\"linebreak\"}]]Electron is more popular among the web development community  at the moment, as is evident from its popularity on Github. With more users and a larger and richer development community, it follows that it will be easier to find tutorials, packages and libraries, and  support/debugging help online. \n\n**Feature set**\n[[{\"pluginType\":\"linebreak\"}]]In practice, the primary difference between NW.js and Electron is their point of entry - NW.js loads a URL specified in your package.json, while Electron requires a separate Javascript file in which the user manually creates a browser window, loads a URL, and handles interactions with the window by listening to window events. This is more similar to the Node.js runtime, and offers closer control over window interactions. Additionally, the general opinion is that Electron is easier to use. [2]\n\nThe main advantage to the NW.js library is that it  supports multiple windows and more advanced window functions/customization (via access to native libraries); however,  PubPub does not need this level of advanced functionality. [3]\n\n---\n\n# Features\nThis section summarizes the user workflow and planned features for the desktop client. The current project attempts to implement a minimal viable feature set for a desktop client, in order to explore how Electron can integrate with the existing PubPub codebase.\n\n### Publication Access\nFunctionally, the desktop client consists largely of the Pub viewer. While online,  the user should be able to access Pubs by searching PubPub's database of publications, or by entering the url of a Pub to navigate directly.  \n\n### Offline Mode\nThe user can choose to switch to Offline Mode, which redirects the home page to a list of Pubs that are saved in the user's local storage. The user can view these Pubs and search through them, but will not be able to access the search feature for the full database. The user also has the option of deleting Pubs from their local storage.\n\nCurrently, the user must manually toggle between Offline Mode and Online Mode. In the event of user failure-- for example, if there is no internet connection and a user attempts to switch back to Online Mode-- the browser will attempt to make a request to the online PubPub API and error out, and the client will stay in Offline Mode. \n\nWe have considered the design choice of whether to switch to Offline Mode automatically when no internet connection is detected-- in practice, this would consist of detecting the lack of connection, notifying the user visually, and redirecting the user to offline mode. A library such as Offline.js may be useful for this (which detects connectivity by polling an endpoint and waiting for a response, and captures failed AJAX requests to retry when the connection returns) [4]. An external library is useful because although Chromium (and by extension Electron) contains a \"navigator.onLine\" variable for detecting connection status, it checks for connection to a LAN, which could be a local network or the Internet [5].  Theoretically, it should also be possible to use the ses.webRequest API in Electron's session library to intercept all AJAX requests, such as search requests or requests for individual Pubs, and attach an onErrorOccurred listener to each request. [6] For this iteration, we chose to have the user manually switch the app offline for the purpose of simplicity. \n\n### Data Syncing\nOn each Pub, the user can choose to save the Pub for offline viewing. We do not automatically save Pubs in consideration of storage limitations, though it might be viable to consider automatically saving any Pubs that the user views and notifying the User while allowing an \"Undo\" or \"Unsave\" option when a Pub is saved. \n\nAnother useful feature would be the updating of currently saved Pubs-- when a User turns off Offline Mode, we check the database for each saved Pub and update its data. Additionally, we  give the user the option to manually trigger this refresh (either on all Pubs or on individual Pubs)  with an \"Update\" button on the Saved Pubs, in the event that the user knows he or she will lose connectivity imminently (i.e. boarding a plane, or leaving a WiFi zone).\n\n# User Interface \n\n### Landing Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421727470_landingmockup.png\",\"originalFilename\":\"landingmockup.png\",\"filetype\":\"image/png\",\"_id\":\"572ac8e104844b3900a04e14\",\"label\":\"landingmockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The homepage of the desktop client. The user can click \\\"Show Me Science\\\" to load a random Pub from the online database, as in the original web application; enter a search query or url (the screenshot omits a dropdown option for choosing between search and URL access on the search bar); or choose to switch to Offline Mode. Switching to Offline Mode will redirect the user to the Offline Landing Page. While in Offline Mode, returning to the homepage via the link on the left-side of the navigation bar will show an option to turn off Offline Mode.\",\"reference\":null}]]\n\n### Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"offlinemockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462421730674_offlinemockup.png\",\"_id\":\"572ac8e4a2637f38000901ef\",\"label\":\"offlinemockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The list of Pubs saved locally. Note the absence of the Update option while in Offline Mode.\\\\nThis page is also accessible from the navigation bar when the client is not in Offline Mode. [7]\",\"reference\":null}]]\n\n### Online Version of Saved Pubs Page\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505063800_onlinelisting.png\",\"originalFilename\":\"onlinelisting.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e6bab8b4c3800179266\",\"label\":\"onlinelisting.png\"},\"align\":null,\"size\":null,\"caption\":\"The view of the Offline Landing Page when the client is not in Offline Mode. Note the addition of options to update all Pubs, or update Pubs individually (i.e. if the User is on a connection with limited data)\",\"reference\":null}]]\n\n### Online Reader View\n"},{"count":1,"removed":true,"value":"[[{\"pluginType\":\"image\",\"source\":{\"filetype\":\"image/png\",\"originalFilename\":\"onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505082929_onlinereader.png\",\"_id\":\"572c0e7ed207ff3d00966e87\",\"label\":\"onlinereader.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The Pub reader view, when not in Offline Mode."},{"count":1,"added":true,"value":"[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462757699030_onlinereader.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462757699030_onlinereader.png\",\"originalFilename\":\"onlinereader.png\",\"filetype\":\"image/png\",\"_id\":\"572fe943a4d1be32003ebc86\",\"label\":\"onlinereader.png\"},\"align\":null,\"size\":null,\"caption\":\"The Pub reader view, when not in Offline Mode."},{"count":1,"value":" "},{"count":1,"removed":true,"value":"The user can toggle the \\\"Read Offline\\\" option to save a Pub locally."},{"count":1,"added":true,"value":"The user can toggle the \\\"Save for Offline\\\" option to save a Pub locally."},{"count":13,"value":" [8]\",\"reference\":null}]]\n\n### Offline Reader View\n[[{\"pluginType\":\"image\",\"source\":{\"thumbnail\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"url\":\"https://s3.amazonaws.com/pubpub-upload/uap-final-paper/1462505061267_offlinereadermockup.png\",\"originalFilename\":\"offlinereadermockup.png\",\"filetype\":\"image/png\",\"_id\":\"572c0e68d207ff3d00966e85\",\"label\":\"offlinereadermockup.png\"},\"align\":\"full\",\"size\":\"large\",\"caption\":\"The offline version of the Pub reader. The toggle is switched out so the user cannot accidentally delete a Pub while viewing it-- he or she must do so from the Saved Pub listings page.\",\"reference\":null}]]\n\n# Future Work\nThe client as described is currently in development, and immediate future work would include the possible features/design choices mentioned above. In the long term, the goal would be to include more of the features from the original web application-- such as the editor, version history, and commenting/discussions. \n\n----\n# References\n[1] Rich, Travis. \"Hello, PubPub\". http://www.pubpub.org/pub/hello. [[{\"pluginType\":\"linebreak\"}]]\n[2] https://github.com/electron/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md[[{\"pluginType\":\"linebreak\"}]]\n[3] https://www.reddit.com/r/javascript/comments/3uuxvo/nwjs_vs_electron/[[{\"pluginType\":\"linebreak\"}]]\n[4] http://github.hubspot.com/offline/docs/welcome/[[{\"pluginType\":\"linebreak\"}]]\n[5] https://discuss.atom.io/t/knowing-if-a-user-has-no-internet-connection/23561[[{\"pluginType\":\"linebreak\"}]]\n[6] https://github.com/electron/electron/blob/master/docs/api/session.md[[{\"pluginType\":\"linebreak\"}]]\n[7] http://viral.pubpub.org/[[{\"pluginType\":\"linebreak\"}]]\n[8] http://www.pubpub.org/pub/engineering-and-ethics"}]}}],"authors":[{"_id":"56d92bf04f6a693d006dde6f","username":"tian_mi","thumbnail":"http://res.cloudinary.com/pubpub/image/upload/c_limit,h_50,w_50/v1457073136/si1etdlx2bndqmocr2r8.png","firstName":"Tian","lastName":"Mi","name":"Tian Mi"}],"isAuthor":true,"isCollaborator":true}